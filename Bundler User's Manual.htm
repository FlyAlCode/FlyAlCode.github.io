<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0067)http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
<TITLE>Bundler User's Manual</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 9.00.8112.16421"></HEAD>
<BODY>
<TABLE cellPadding=20 width=800>
  <TBODY>
  <TR>
    <TD><FONT size=+1><PRE>-------------------------------------------------------------------------------
|  <B> Bundler v0.4 User's Manual </B>                                               |
|     copyright 2008-2009 Noah Snavely (snavely@cs.cornell.edu)               |
|                                                                             |
|  based on the Photo Tourism work of Noah Snavely, Steven M. Seitz,          |
|       (University of Washington) and Richard Szeliski (Microsoft Research)  |
|                                                                             |
|  For more technical details, visit <A href="http://phototour.cs.washington.edu/">http://phototour.cs.washington.edu/</A>       |
-------------------------------------------------------------------------------
</PRE></FONT>
      <H3>Table of Contents</H3><PRE>    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S1">I.    What is Bundler?</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S2">II.   Conditions of use</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S3">III.  What's included in this distribution</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S4">IV.   Before you begin</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S5">V.    Running bundler</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S6">VI.   Output format and scene representation</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S7">VII.  Command-line options</A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S8">VIII. Acknowledgements </A>
    <A href="http://www.cs.cornell.edu/~snavely/bundler/bundler-v0.4-manual.html#S9">IX.   Contact information</A>
</PRE>
      <P>
      <HR>

      <H3><A name=S1>I. What is Bundler?</A></H3>Bundler is a 
      structure-from-motion system for unordered image collections (for 
      instance, images from the Internet). Bundler takes a set of images, image 
      features, and image matches as input, and produces a 3D reconstruction of 
      the camera and (sparse) scene geometry as output. The system, described in 
      [1] and [2], reconstructs the scene incrementally, a few images at a time, 
      using a modified version of the Sparse Bundle Adjustment package of 
      Lourakis and Argyros [3] as the underlying optimization engine. 
      <P>Currently, Bundler has primarily been compiled and tested under Linux 
      (though Windows versions for cygwin and Visual Studio 2005 have also been 
      released). 
      <P>
      <HR>

      <H3><A name=S2>II. Conditions of use</A></H3>Bundler is distributed under 
      the GNU General Public License. For information on commercial licensing of 
      this software, please contact the authors at the address given below. 
      <P>
      <HR>

      <H3><A name=S3>III. What's included in this distribution</A></H3>Included 
      with the binary distribution is the Bundler executable 
      (<TT>bin/bundler</TT>), as well as a number of other utility scripts and 
      executables (in the <TT>bin/</TT> directory). In addition, there are a 
      number of example image sets (and example results) under the 
      <TT>examples/</TT> directory. A version of the approximate nearest 
      neighbors (ANN) library of David M. Mount and Sunil Arya, customized for 
      searching verctors of unsigned bytes, is also included. 
      <P>A utility program for converting bundle files (.out) to the input 
      required by Dr. Yasutaka Furukawa's PMVS multi-view stereo system (online 
      <A 
      href="http://www.cs.washington.edu/homes/furukawa/research/pmvs/index.html">here</A>) 
      called <TT>Bundle2PMVS</TT> is also included. This distribution also 
      includes a program called <TT>RadialUndistort</TT> for generating 
      undistorted images (based on the undistortion parameters estimated by 
      Bundler). 
      <P>Finally, included in the <TT>bin</TT> directory is the <TT>'jhead'</TT> 
      program for reading Exif tags from JPEG images. Very special thanks to 
      Matthias Wandel for putting this useful program in the public domain. 
      <P>
      <HR>

      <H3><A name=S4>IV. Before you begin</A></H3>You'll first need to download 
      the Bundler distribution from: 
      <P>&nbsp; &nbsp; <A 
      href="http://phototour.cs.washington.edu/bundler/">http://phototour.cs.washington.edu/bundler/</A> 
      (the binary distribution is <B>highly recommended</B>) 
      <P>and extract it into a directory (to be referred to as 
      <TT>BASE_PATH</TT>). 
      <P>You'll also need <A href="http://www.imagemagick.org/">ImageMagick</A> 
      installed on you system (for converting jpg files to pgm format, required 
      for David Lowe's SIFT binary). 
      <P>In addition, you'll need a feature detector to get the system working. 
      Assuming you will be using SIFT features generated by David Lowe's SIFT 
      binary, you'll need to get SIFT from 
      <P>&nbsp; &nbsp; <A 
      href="http://www.cs.ubc.ca/~lowe/keypoints/">http://www.cs.ubc.ca/~lowe/keypoints/</A> 

      <P>and copy it to <TT>BASE_PATH/bin</TT> (making sure it is called 
      <TT>'sift'</TT>, or <TT>'siftWin32.exe'</TT> under Windows). 
      <P>The <TT>RunBundler.sh</TT> script relies on bash and perl being 
      installed. The easiest way to run this script in Windows is through 
      cygwin. 
      <P>Finally, copy the approximate nearest neighbors (ANN) shared library at 
      <TT>BASE_PATH/lib/libANN_char.so</TT> to a location in your 
      <TT>LD_LIBRARY_PATH</TT> (or add <TT>BASE_PATH/lib</TT> to 
      <TT>LD_LIBRARY_PATH</TT>. 
      <P>
      <HR>

      <H3><A name=S5>V. Running bundler</A></H3>The easiest way to start using 
      Bundler is to use the included bash shell script, <TT>RunBundler.sh</TT>. 
      Simply execute this script in a directory with a set of images in JPEG 
      format, and it will automatically run all the steps needed to run 
      structure from motion on the images (assuming everything goes well). As 
      mentioned above, you'll first need to edit this script to set the 
      <TT>BASE_PATH</TT> variable appropriately (again, you'll also need to edit 
      set the <TT>BASE_PATH</TT> variable in the Perl script 
      <TT>BASE_PATH/bin/extract_focal.pl</TT> and the bash script 
      <TT>BASE_PATH/bin/ToSift.sh</TT>). To test this script, try running it 
      from one of the example directories (e.g. <TT>examples/ET/before</TT>). 
      <P>The <TT>'bundler'</TT> exectutable is actually the last in a sequence 
      of steps that need to be run to reconstruct a scene. 
      <TT>RunBundler.sh</TT> takes care of all these steps for you, but it's 
      useful to know what's going on. The main initial steps are to generate 
      features and pairwise feature matches for the image set. Any type of image 
      features can be used, but Bundler assumes the features are in the SIFT 
      format, and so David Lowe's SIFT detector, (available at <A 
      href="http://www.cs.ubc.ca/~lowe/keypoints/">http://www.cs.ubc.ca/~lowe/keypoints/</A>) 
      is the easiest to get working with Bundler (<TT>RunBundler.sh</TT> assumes 
      that SIFT is used). A list of images containing estimating focal length 
      information also must be created. The four steps to creating a 
      reconstruction are therefore: 
      <P>
      <OL>
        <LI>Create a list of images using the script <TT>'extract_focal.pl'</TT> 
        (this extracts focal length information, when available, from each 
        image, and stores it in an image list). 
        <LI>Generate (SIFT) features for each image. 
        <LI>Match features between each pairs of images (this step can take a 
        while). The computed feature matches are stored in a file called 
        <TT>'matches.init.txt'</TT>. 
        <LI>Run <TT>'bundler'</TT> with a suitable options file. </LI></OL>Again, 
      running the <TT>RunBundler.sh</TT> script is the easiest way to perform 
      these steps. To simplify steps 1-3, a number of utility scripts and 
      programs are included with this distribution (and invoked from 
      <TT>RunBundler.sh</TT>). 
      <P>Bundler itself is typically invoked as follows: 
      <P>&nbsp; &nbsp; <TT>&gt; bundler list.txt --options_file options.txt</TT> 

      <P>The first argument is the list of images to be reconstructed (created 
      with the <TT>'extract_focal.pl'</TT> utility). Next, an options file 
      containing settings to be used for the current run is given. 
      <TT>RunBundler.sh</TT> creates an options file that will work in many 
      situations. Common options are described later in this document. 
      <P>
      <HR>

      <H3><A name=S6>VI. Output format and scene representation</A></H3>Bundler 
      produces files typically called 'bundle_*.out' (we'll call these "bundle 
      files"). With the default commands, Bundler outputs a bundle file called 
      'bundle_&lt;n&gt;.out' containing the current state of the scene after 
      each set of images has been registered (n = the number of currently 
      registered cameras). After all possible images have been registered, 
      Bundler outputs a final file named 'bundle.out'. In addition, a "ply" file 
      containing the reconstructed cameras and points is written after each 
      round. These ply files can be viewed with the "scanalyze" mesh viewer, 
      available at <A 
      href="http://graphics.stanford.edu/software/scanalyze/">http://graphics.stanford.edu/software/scanalyze/</A>. 
      There are several other viewers that also can read ply files (as scanalyze 
      can sometimes be difficult to compile under Linux). These include <A 
      href="http://meshlab.sourceforge.net/">Meshlab</A> and Blender (where you 
      can use File-&gt;Import-&gt;PLY to open a ply file---thanks to Ricardo 
      Fabbri for the tip). 
      <P>The bundle files contain the estimated scene and camera geometry have 
      the following format: 
      <P><PRE><TT>
    # Bundle file v0.3
    &lt;num_cameras&gt; &lt;num_points&gt;   [two integers]
    &lt;camera1&gt;
    &lt;camera2&gt;
       ...
    &lt;cameraN&gt;
    &lt;point1&gt;
    &lt;point2&gt;
       ...
    &lt;pointM&gt;
</PRE></TT>
      <P>Each camera entry <TT>&lt;cameraI&gt;</TT> contains the estimated 
      camera intrinsics and extrinsics, and has the form: <PRE><TT>
    &lt;f&gt; &lt;k1&gt; &lt;k2&gt;   [the focal length, followed by two radial distortion coeffs]
    &lt;R&gt;             [a 3x3 matrix representing the camera rotation]
    &lt;t&gt;             [a 3-vector describing the camera translation]
</TT>
</PRE>
      <P>The cameras are specified in the order they appear in the list of 
      images. 
      <P>Each point entry <POINTI>has the form: <PRE><TT>
    &lt;position&gt;      [a 3-vector describing the 3D position of the point]
    &lt;color&gt;         [a 3-vector describing the RGB color of the point]
    &lt;view list&gt;     [a list of views the point is visible in]
</TT></PRE>
      <P>The view list begins with the length of the list (i.e., the number of 
      cameras the point is visible in). The list is then given as a list of 
      quadruplets <TT>&lt;camera&gt; &lt;key&gt; &lt;x&gt; &lt;y&gt;</TT>, where 
      <TT>&lt;camera&gt;</TT> is a camera index, <TT>&lt;key&gt;</TT> the index 
      of the SIFT keypoint where the point was detected in that camera, and 
      <TT>&lt;x&gt;</TT> and <TT>&lt;y&gt;</TT> are the detected positions of 
      that keypoint. Both indices are 0-based (e.g., if camera 0 appears in the 
      list, this corresponds to the first camera in the scene file and the first 
      image in "list.txt"). The pixel positions are floating point numbers in a 
      coordinate system where the origin is the center of the image, the x-axis 
      increases to the right, and the y-axis increases towards the top of the 
      image. Thus, (-<I>w</I>/2, -<I>h</I>/2) is the lower-left corner of the 
      image, and (<I>w</I>/2, <I>h</I>/2) is the top-right corner (where 
      <I>w</I> and <I>h</I> are the width and height of the image). 
      <P>We use a pinhole camera model; the parameters we estimate for each 
      camera are a focal length (<I>f</I>), two radial distortion parameters 
      (<I>k1</I> and <I>k2</I>), a rotation (<B>R</B>), and translation 
      (<B>t</B>), as described in the file specification above. The formula for 
      projecting a 3D point <B>X</B> into a camera (<B>R</B>, <B>t</B>, 
      <I>f</I>) is: 
      <P><PRE>    <B>P</B> = <B>R</B> * <B>X</B> + <B>t</B>       (conversion from world to camera coordinates)
    <B>p</B> = -<B>P</B> / <B>P</B>.z        (perspective division)
    <B>p</B>' = <I>f</I> * r(<B>p</B>) * <B>p</B>   (conversion to pixel coordinates)
</PRE>
      <P>where <B>P</B>.z is the third (z) coordinate of <B>P</B>. In the last 
      equation, r(<B>p</B>) is a function that computes a scaling factor to undo 
      the radial distortion: 
      <P><PRE>     r(<B>p</B>) = 1.0 + <I>k1</I> * ||<B>p</B>||^2 + <I>k2</I> * ||<B>p</B>||^4.
</PRE>
      <P>This gives a projection in pixels, where the origin of the image is the 
      center of the image, the positive x-axis points right, and the positive 
      y-axis points up (in addition, in the camera coordinate system, the 
      positive z-axis points backwards, so the camera is looking down the 
      negative z-axis, as in OpenGL). 
      <P>Finally, the equations above imply that the camera viewing direction 
      is: 
      <P><PRE>    <B>R</B>' * [0 0 -1]'  (i.e., the third row of -R or third column of -R')
</PRE>
      <P>(where ' indicates the transpose of a matrix or vector). 
      <P>and the 3D position of a camera is 
      <P><PRE>    -<B>R</B>' * <B>t</B> .
</PRE>
      <P>
      <HR>

      <H3><A name=S7>VII. Command-line options</A></H3>Bundler has a number of 
      internal parameters, so there are a large number of command-line options. 
      That said, we've found that a common set of parameters works well for most 
      image collections we've tried, so it is probably safe to start with the 
      recommended options (used by the <TT>RunBundler.sh</TT> script). One very 
      useful option is <TT>'--options_file &lt;file&gt;'</TT>, which tells 
      Bundler to read a list of options from a file. The default options file 
      created by <TT>RunBundler.sh</TT> includes the following options: <PRE>  --match_table matches.init.txt
     [specifies the file where the match files are stored]

  --output bundle.out
     [specifies the name of the final output reconstruction]

  --output_all bundle_
     [specifies that all intermediate reconstructions should be
      output to files with prefix "bundle_"]

  --output_dir bundle
     [the directory all output files should be written to, typically
      called "bundle"]

  --variable_focal_length
     [directs bundler to optimize for an independent focal length for
      each image]

  --use_focal_estimate
     [directs bundler to use the estimated focal lengths obtained from
      the Exif tags for each image]

  --constrain_focal
     [constrain the focal length of each camera to be close to the
      initial focal length estimate (from Exif tags).  This option
      adds penalty terms to the bundle adjustment objective function]

  --constrain_focal_weight 0.0001
     [weight on the penalty terms for the focal length constraints (a
      small weight is typically sufficient)]

  --estimate_distortion
     [directs bundler to estimate radial distortion parameters for
      each image]

  --run_bundle
     [run structure from motion (as opposed to other operations on
      existing reconstructions)]
</PRE>
      <P><B>Other options.</B> &nbsp;There are a number of other useful options 
      in addition to the default ones listed above, including: <PRE>  --init_pair1 &lt;image_idx1&gt;
  --init_pair2 &lt;image_idx2&gt;
     [Specifies which images to use as the initial pair.  Very useful
      when the automatically chosen pair results in a bad
      reconstruction.]

  --sift_binary &lt;sift&gt;
     [The location of the SIFT binary on your installation, e.g.,
     '/usr/bin/sift' or '/cygdrive/c/usr/bin/siftWin32.exe'.]

  --add_images &lt;add_list&gt;
     [Given an existing reconstruction specified with the --bundle
      option, attempts to add the images listed in the file &lt;add_list&gt;
      to the reconstruction, writing the results to the file
      'bundle.added.out'.  The new list of images is written to
      'list.added.txt'.  Use the 'extract_focal.pl' script to generate
      the file &lt;add_list&gt; from a directory of JPEGs, but note that the
      correct path to these images must be included -- which may
      require editing the add list file.  Do not include the
      '--run_bundle' option when adding new images.  If the SIFT key
      files have not yet been generated for the new images, bundler
      will try to extract features, but this requires that the
      --sift_binary option be set.]

  --options_file &lt;options_file&gt;
     [Read in a list of options from the specified file.]

  --help
     [Print out the complete list of command-line options.]
</PRE>
      <P>
      <HR>

      <H3><A name=S8>VIII. Acknowledgements</A></H3>This work was supported by 
      Microsoft Research, the University of Washington Animation Research Labs, 
      an Achievement Rewards for College Scientists (ARCS) fellowship, National 
      Science Foundation grants IIS-0413198 and DGE-0203031, and an endowment by 
      Emer Dooley and Rob Short. 
      <P>Thanks to Manolis Lourakis and Antonis Argyros for their <A 
      href="http://www.ics.forth.gr/~lourakis/sba/">sparse bundle adjustment</A> 
      package, to David Lowe for <A 
      href="http://www.cs.ubc.ca/~lowe/keypoints/">SIFT</A> , to David M. Mount 
      and Sunil Arya for their <A 
      href="http://www.cs.umd.edu/~mount/ANN/">approximate nearest neighbors</A> 
      library, and to Matthias Wandel for his excellent <TT>'jhead'</TT> 
      program. 
      <P>Special thanks as well to Kathleen Tuite and Sebastian Koch for testing 
      this distribution. 
      <P>
      <HR>

      <H3><A name=S9>IX. Contact information</A></H3>Questions? Comments? Bug 
      reports? Send email to Noah Snavely at snavely (at) cs.washington.edu. 
      <P>
      <HR>

      <H3>References</H3><PRE>[1] Noah Snavely, Steven M. Seitz, and Richard Szeliski.  Photo
    Tourism: Exploring Photo Collections in 3D.  SIGGRAPH Conf. Proc.,
    2006.

[2] Noah Snavely, Steven M. Seitz, Richard Szeliski.  Modeling the
    World from Internet Photo Collections. International Journal of
    Computer Vision (to appear), 2007.

[3] M.I.A. Lourakis and A.A. Argyros.  The Design and Implementation
    of a Generic Sparse Bundle Adjustment Software Package Based on
    the Levenberg-Marquardt Algorithm.  Tech.  Rep. 340, Inst. of
    Computer Science-FORTH, Heraklion, Crete, Greece. Available from
    http://www.ics.forth.gr/~lourakis/sba.
</PRE></TD></TR></TBODY></TABLE></BODY></HTML>
